priority 1

global !p
def read_composer_json():
	import json

	composer_file = 'composer.json'
	if not os.path.isfile(composer_file): return

	with open(composer_file) as data_file:
		config = json.load(data_file)

	return config

def get_autoload_paths():
	config = read_composer_json()

	if 'autoload' not in config: return []
	if 'psr-4' not in config['autoload']: return []

	paths = config['autoload']['psr-4']

	if 'autoload-dev' in config and 'psr-4' in config['autoload-dev']:
		 paths.update(config['autoload-dev']['psr-4'])

	return paths

def class_name_from_file():
	return re.match(r'.*(?=\.)', fn).group()

def get_namespace():
	dir_path = os.path.dirname(path) + '/'
	for ns, fp in get_autoload_paths().items():
		m = re.search(r'' + re.escape(fp) + '(.*)', dir_path)
		if m: return (ns.strip('\\') + '\\' + m.group(1).replace('/', '\\')).strip('\\')

def is_custom_type(type):
	return (len(t[1]) > 0 and t[1][0].isupper())

def lowercase_first(string):
	if len(string) < 1: return ''

	return string[0].lower() + string[1:]

def uppercase_first(string):
	if len(string) < 1: return ''

	return string[0].upper() + string[1:]

def split_arg_and_type(arg):
	parts = list(map(lambda s: s.strip(), arg.strip().split(' ')))

	if len(parts) != 2:
		return ['mixed', parts[0]]

	return parts

def generate_properties(args):
	args = args.strip()

	if args:
		args = args.split(',')
		args = list(map(split_arg_and_type, args))
	else: 
		args = []

	properies = ''
	for arg in args:
		properies += '\n    /** @var ' + arg[0] + ' */'
		properies += '\n    private ' + arg[1] + ';\n'

	return properies

def set_fields_from_arguments(args):
	args = args.strip()

	if args:
		args = args.split(',')
		args = list(map(split_arg_and_type, args))
	else: 
		args = []

	properies = [] 
	for arg in args:
		properies.append('$this->' + arg[1][1:] + ' = ' + arg[1] + ';')

	return properies

def docblock(args):
	args = args.strip()

	if args:
		args = args.split(',')
		args = list(map(split_arg_and_type, args))
	else: 
		args = []

	from functools import reduce
	max_type_len = reduce(lambda curr, arg: len(arg[0]) if len(arg[0]) > curr else curr, args, 0)

	block = ''
	for arg in args:
		block += '\n     * @param ' + arg[0].ljust(max_type_len) +' ' + arg[1]

	if block: block += '\n     *'

	return block
endglobal


## CLASS RELATED

snippet io "instanceof"
${1:object} instanceof ${2:class}
endsnippet


snippet ce "class_exists()"
class_exists(${1:classname})$0
endsnippet

snippet s "$obj->set()"
$${1:obj}->set${2:Property}(${3:value})$0
endsnippet

snippet g "$obj->get()"
$${1:obj}->get${2:Property}()$0
endsnippet

snippet gov "get_object_vars()"
get_object_vars($${1:object})$0
endsnippet

snippet gc "get_class()"
get_class(${1:object})$0
endsnippet

snippet gcm "get_class_methods()"
get_class_methods(${1:object}$0
endsnippet

snippet php "php tag"
<?php
	$0
endsnippet

snippet new "New class instance" !b
$${1:variableName} = new ${2:${1/\w+\s*/\u$0/}}($3);
$0
endsnippet

snippet vgs "PHP Class Getter Setter" !b
private $${1:var};

/**
 * @return $2
 */
public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}

/**
 * @param $2 $$1
 *
 * @return $this
 */
public function set${1/\w+\s*/\u$0/}($2 $$1)
{
    $this->$1 = $$1;

    return $this;
}$0
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:$param})
{
	$0
}
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:$param})
{
	$0
}
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param})
{
	$0
}
endsnippet

snippet fek "foreach key value"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
    ${4:// code...}
}
endsnippet

snippet prt "print_r true"
print_r($0, true);
endsnippet

snippet pr "print_r"
print_r($0);
endsnippet

snippet e "echo"
echo "$1";
$0
endsnippet

snippet je "json_encode"
json_encode($${1:stringToEncode)$0
endsnippet

snippet jd "json_decode"
json_encode($${1:objectToDecode}, ${2:true})$0
endsnippet

## ARRAYS

snippet ake "array_key_exists" i
array_key_exists(${1:key}, ${2:array})
endsnippet

snippet av
'${1:key}' => ${2:value},$3
endsnippet

snippet im "array implode"
implode(${1:glue}, $${2:array})$0
endsnippet

snippet ex "array explode"
explode(${1:delimiter}, $${2:array})$0
endsnippet

snippet sr "string replace"
str_replace(${1:search}, ${2:replace}, $${3:haystack})$0
endsnippet

snippet sp "string position"
strpos($${1:haystack}, ${2:search})$0
endsnippet

snippet sip "string case insensitive position"
stripos($${1:haystack}, ${2:search})$0
endsnippet

snippet sl "string length"
strlen($${1:string})$0
endsnippet

snippet iff "if false"
if (false === $${1:what}) {
    ${0:// code}
}
endsnippet

snippet ift "if true"
if (true === $${1:what}) {
    ${0:// code}
}
endsnippet

snippet ifc "if compare 2 values"
if ($${1:a} === $${2:b}) {
    ${0:// code}
}
endsnippet

snippet r "return"
return ${1:var};
endsnippet

snippet = "assign var" !b
$${1:variable} = ${2:value};$0
endsnippet

snippet ? "ternary"
(${1:condition}) ? ${2:true} : ${3:false}$0
endsnippet

snippet t "$this->" w!
$this->$0
endsnippet

snippet ". "concat" i
" . $1 . "$0
endsnippet

snippet '. "concat" i
' . $1 . '$0
endsnippet

snippet el "error_log"
error_log('$1 :' . $2);$0
endsnippet

snippet rt "return true"
return true;$0
endsnippet

snippet rn "return null"
return;$0
endsnippet

snippet rf "return false"
return false;$0
endsnippet

snippet . "concatenate"
$${1:var} .= $2;$0
endsnippet

snippet vd "sweet single var_dump"
var_dump($1);
endsnippet

# killer backtrace:
snippet kbt "killer backtrace"
array_walk(debug_backtrace(),create_function('$a,$b','print "{$a[\'function\']}()(".basename($a[\'file\']).":{$a[\'line\']}); <br />";'));
endsnippet

snippet d "die()"
die('after $1 in file '.basename(__FILE__).' in line '.__LINE__);$0
endsnippet

snippet vdd "sweet var_dump"
var_dump('${1:var} in ' . basename(__FILE__));
var_dump($1);
endsnippet

snippet ve "Dumb debug helper in cli"
var_export($1);$0
endsnippet


snippet try "try/catch"
try {
    $1
} catch (${2:Exception} $e) {
    $3
}
endsnippet

snippet pt "@throws"
@throws $1Exception$0
endsnippet

snippet throw "throw new Exception"
throw new $1Exception('${2:message}');$0
endsnippet

snippet /* "comment"
/**
 * ${1:comment}
 */
endsnippet

snippet ee
echo "$1".PHP_EOL;$0
endsnippet

snippet array "array" b
$${1:arrayName} = ['${2}' => ${3}];$0
endsnippet

snippet builder
<?php declare(strict_types=1);

namespace `!p snip.rv = get_namespace()`;

final class `!p snip.rv = class_name_from_file()`
{
    /**
     * @return $2
     */
    public function build(): $2
    {
        $${2/\w+\s*/\l$0/} = (new $2());

		return $${2/\w+\s*/\l$0/};
	}
}
endsnippet

snippet withc
/**
 * @var ${1/\w+\s*/\u$0/}
 */
private $${1:var};

/**
 * @param ${1/\w+\s*/\u$0/} $$1
 *
 * @return $2
 */
public function with${1/\w+\s*/\u$0/}(${1/\w+\s*/\u$0/} $$1): ${2:`!p snip.rv=snip.basename`}
{
    $this->$1 = $$1;

    return $this;
}$0
endsnippet


snippet withp
/**
 * @var $2
 */
private $${1:var};

/**
 * @param $2 $$1
 *
 * @return $3
 */
public function with${1/\w+\s*/\u$0/}($2 $$1): ${3:`!p snip.rv=snip.basename`}
{
    $this->$1 = $$1;

    return $this;
}$0
endsnippet

snippet class "Class declaration template" b
<?php declare(strict_types=1);

namespace `!p snip.rv = get_namespace()`;

class `!p snip.rv = class_name_from_file()`
{
	$0
}
endsnippet

snippet interface "Interface declaration template" b
<?php declare(strict_types=1);

namespace `!p snip.rv = get_namespace()`;

interface `!p snip.rv = class_name_from_file()`
{
	public function ${1:someFunction}($2)$3;$4
}
endsnippet
snippet c "php namespace and class" b
<?php declare(strict_types=1);

namespace `!p snip.rv = get_namespace()`;

final class `!p snip.rv = class_name_from_file()`
{
	$0
}
endsnippet

snippet __ "php constructor" b
`!p snip.rv = generate_properties(t[1])`
/**`!p snip.rv = docblock(t[1])`/
public function __construct($1)
{
	${0:`!p
snip >> 1
for l in set_fields_from_arguments(t[1]): snip += l`}
}
endsnippet

snippet m "method" b
/**`!p snip.rv = docblock(t[3])`
 * @return $4
 */
${1:public} function ${2}(${3})
{
	$0
}
endsnippet

snippet ms "method signature" b
/**`!p snip.rv = docblock(t[2])`
 * @return $3
 */
public function $1($2);

endsnippet

snippet map "array map" b
array_map(function($${1:value}) {
	return $3;
}, $$2);
endsnippet

snippet filter "array filter" b
array_filter($$1, function($${2:value}) {
	return $3;
});
endsnippet

snippet reduce "array reduce" b
array_reduce($$1, function($${2:carry}, $${3:value}) {
	return $4;
});
endsnippet
snippet sg "Setter and Getter" b

/**
 * @var ${1}
 */
private $${2:`!p if is_custom_type(t[1]): snip.rv = lowercase_first(t[1])`};

`!p snip.rv = '/** @param ' + t[1] + ' $' + t[2] + ' */'`
public function set`!p snip.rv = uppercase_first(t[2])`(`!p if is_custom_type(t[1]): snip.rv = t[1] + ' '`$$2)
{
	$this->$2 = `!p snip.rv = '' if is_custom_type(t[1]) else '(' + t[1] + ') '`$$2;
}

/**
 * @return $1
 */
public function get`!p snip.rv = uppercase_first(t[2])`()
{
	return $this->$2;
}
endsnippet

snippet if "php if" !b
if (${1}) {
	$0
}
endsnippet

snippet tc "TestClass"
<?php declare(strict_types=1);

namespace `!p snip.rv = get_namespace()`;

use PHPUnit\Framework\TestCase;

class `!p snip.rv = class_name_from_file()` extends TestCase
{
    $0
}
endsnippet

snippet tsu "test setup" b
/**
 * @return void
 */
public function setUp()
{
    $0
}
endsnippet

snippet tm "test method annotated" b
/**
 * @test
 */
public function $1()
{
    $0
}
endsnippet
